---
title: "Untitled"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Packages

```{r}

library(tidyverse)
library(survival)
library(logistf)
library(glmmTMB)
library(DHARMa)
library(boot)
library(broom.mixed)
library(SuppDists)

```

## Directory

```{r}

Dir_RatopRda <- "C:/Users/laura/Dropbox/PhD_20150515/Research projects/DMR_Ratop/Rda" 

Dir_DCRda <- "C:/Users/laura/Dropbox/PhD_20150515/Research projects/DMR_HelperBreedingOpp/DC/DC_Analyses/Rda" 


```

## Data

```{r}
setwd(Dir_DCRda)
load("DC_Info_F.rda")

```

## Effect of treatment on delay til first parturition

```{r Data}

FirstPart_Data <- DC_Info_F %>% 
  group_by(ExperimentalGroup) %>% 
  slice_min(FirstDCParturitionDate) %>% 
  ungroup() %>% 
  dplyr::select(ExperimentalGroup,
                BS_Original,
         Treatment,
         FirstParturitionPairingDayDiff) %>% 
  rename(Delay = FirstParturitionPairingDayDiff) %>% 
  mutate(Delay = as.numeric(Delay)) %>% 
  arrange(Treatment,
          Delay)

```

I have issues with gamma (with and without dispformula) and lognormal model for which model validation gives a significant KS. Tweedie (with and without disformula) has convergence issue

Only model that seems to work is inverse gaussian

```{r Model}

#Raw value 
FirstPart_Data %>% 
  group_by(Treatment) %>% 
  summarize(avg = mean(Delay),
            sd = sd(Delay)) %>% 
  ungroup()


#Gamma model
DelayFirstPart_Poo <- glmmTMB(Delay ~ Treatment, 
                             family = Gamma(link = "log"), 
                             dispformula = ~ Treatment,
                             data = FirstPart_Data)
summary(DelayFirstPart_Poo)



#Log normal model 
DelayFirstPart_Log <- glmmTMB(Delay ~ Treatment, 
                             family = "lognormal", 
                             data = FirstPart_Data)
summary(DelayFirstPart_Log)



#Inverse gaussian model
DelayFirstPart_IG <- glm(Delay ~ Treatment,  
                             family = inverse.gaussian(link = "log"),  
                             data = FirstPart_Data)
summary(DelayFirstPart_IG)
confint(DelayFirstPart_IG, level = 0.95)


#Tweedie
#Has real problem to run with or without dispformula specified
DelayFirstPart_Tweedie <- glmmTMB(Delay ~ Treatment, 
                                  family = tweedie(link = "log"), 
                                  data = FirstPart_Data,
                                  control = glmmTMBControl(optimizer = optim, optArgs = list(method = "BFGS")),
  start = list(theta = c(log(1.5))))
summary(DelayFirstPart_Tweedie)


#AIC of gamma model seems to be better 
AIC(DelayFirstPart_IG, DelayFirstPart_Gamma,DelayFirstPart_Log,DelayFirstPart_Tweedie )


#Log transformed response
DelayFirstPart_LogTrans <- glmmTMB(log(Delay) ~ Treatment, 
                                   family = gaussian, 
                                   data = FirstPart_Data)
summary(DelayFirstPart_LogTrans)

```

```{r Model validation}

#Gamma validation 
Sim_Gamma <- simulateResiduals(DelayFirstPart_Poo)
plot(Sim_Gamma)
#KS significant

#log normal validation
Sim_Log <- simulateResiduals(DelayFirstPart_Log)
plot(Sim_Log)
#KS significant


#Model validation
# Sim_Tweedie <- simulateResiduals(DelayFirstPart_Tweedie)
# plot(Sim_Tweedie)
#Don t run it makes R crash

#Inverse gaussia does seem to pass 
Sim_IG <- simulateResiduals(DelayFirstPart_IG)
plot(Sim_IG)


#Log transformed
Sim_IG <- simulateResiduals(DelayFirstPart_LogTrans)
plot(Sim_IG)
#Also issue with KS 

```

## Effect of BS on probability to produce the first litter

They produced the first litter in 75% of the case (9/12) but this probability is not significantly different than expected by chance. I guess the correct way to run the model to avoid duplicating the data, is to fix the BF as the focal (or the sister)

TO DO;CHANGE ALL NAMES OF MODELS SO IT IS MORE APPROPRIATE

```{r Data}
#All females from queen treatment    

FirstPart_QT <- DC_Info_F %>%   
  filter(Treatment == "Queen") %>%   
  group_by(ExperimentalGroup) %>%   
  mutate(BredFirst = rank(FirstDCParturitionDate, na.last = "keep", ties.method = "first")) %>%   
  mutate(BredFirst = case_when(BredFirst == 1 ~ "Yes",                                 TRUE ~ "No")) %>%    
  ungroup() %>%    
  dplyr::select(ExperimentalGroup,          
                AnimalID,          
                BS_Original,          
                FirstDCParturitionDate,          
                EvictionStatus,          
                BredFirst)   
#The three cases where the queen did not breed first (and actually did not breed at all) were cases where they were evicted rapidly and di not have time to produce the first litter FirstPart_QT_Q <- FirstPart_QT %>%    filter(BS_Original == "Breeder")     
```

```{r Model}
pBreedFirst_Breeder <- glmmTMB(as.factor(BredFirst) ~ 1,                       family = "binomial",
                               data = FirstPart_QT %>%   
                                 filter(BS_Original == "Breeder")) 
summary(pBreedFirst_Breeder) 
inv.logit(1.0986) 

#Confidence intervals
confint(pBreedFirst_Breeder, level = 0.95)

#taking the daughter perspective is exactly the opposite
pBreedFirst_Daughter <- glmmTMB(as.factor(BredFirst) ~ 1,                       family = "binomial",
                               data = FirstPart_QT %>%   
                                 filter(BS_Original == "Helper")) 
summary(pBreedFirst_Daughter) 

```

```{r Model Validation}
SimR_pBreedFirst <- simulateResiduals( pBreedFirst_Breeder)  
plot(SimR_pBreedFirst) 
```

## Effect of female type on delay til first litter

```{r Data}

FirstPart <- DC_Info_F %>%   
  group_by(ExperimentalGroup) %>%   
  mutate(BredFirst = rank(FirstDCParturitionDate, na.last = "keep", ties.method = "first")) %>%   
  mutate(BredFirst = case_when(BredFirst == 1 ~ "Yes",                                 TRUE ~ "No")) %>%    
  ungroup() %>%    
  dplyr::select(ExperimentalGroup, 
                Treatment,
                AnimalID,          
                BS_Original,          
                FirstDCParturitionDate,   
                PairingDate,
                EvictionStatus,          
                BredFirst) %>% 
  filter(BredFirst == "Yes") %>% 
  mutate(Delay = as.integer(FirstDCParturitionDate - PairingDate))%>% 
  mutate(FemaleType = case_when(Treatment == "Queen" & BS_Original == "Breeder" ~ "Breeder",
                                Treatment == "Queen" & BS_Original == "Helper" ~ "Daughter",
                                Treatment == "Sub" ~ "Sister")) %>% 
  arrange(Treatment,
          FemaleType,
          Delay)

write.csv(FirstPart, "FirstPart.csv",row.names = FALSE)
```

```{r Model}

#Gamma model
FirstPart_LM <- glmmTMB(Delay ~ FemaleType, 
                             data = FirstPart)
summary(FirstPart_Gamma)


#Gamma model
FirstPart_Gamma <- glmmTMB(Delay ~ FemaleType, 
                             family = Gamma(link = "log"), 
                             dispformula = ~ Treatment,
                             data = FirstPart %>% 
                           filter(FemaleType != "Daughter"))
summary(FirstPart_Gamma)



#Log normal model 
FirstPart_Log <- glmmTMB(Delay ~ FemaleType, 
                         family = "lognormal", 
                         dispformula = ~ Treatment,
                         data = FirstPart %>% 
                           filter(FemaleType != "Daughter"))
summary(FirstPart_Log)



#Inverse gaussian model
FirstPart_IG <- glm(Delay ~ FemaleType,  
                    family = inverse.gaussian(link = "log"), 
                    data = FirstPart %>% 
                      filter(FemaleType != "Daughter")
                      )
summary(FirstPart_IG)
View(FirstPart)


#tweedie
FirstPart_Tweedie <- glmmTMB(Delay ~ FemaleType,  
                             family = tweedie(link = "log"), 
                              dispformula = ~ Treatment,
                             data = FirstPart %>% 
                           filter(FemaleType != "Daughter"))
summary(FirstPart_Tweedie)
#Convergence issue 


#Tweedie with mgcv
library(mgcv)
FirstPart_Tweediemgcv <- gam(Delay ~ FemaleType, 
                         family = tw(),
                         data = FirstPart)
summary(FirstPart_Tweediemgcv)

#AIC of gamma model seems to be better 
AIC(FirstPart_IG,FirstPart_Gamma,FirstPart_Log,FirstPart_Tweedie )

FirstPart_LM <- lm(Delay ~ FemaleType, data = FirstPart)
summary(FirstPart_LM)


```

None of the models used produce good model estimates

```{r Model validation}


Sim_FirstPart_Lm <- simulateResiduals(FirstPart_LM )
plot(Sim_FirstPart_Lm)
#KS significant

Sim_FirstPart_Log <- simulateResiduals(FirstPart_Log)
plot(Sim_FirstPart_Log)
#Deviance residuals


Sim_FirstPart_IG <- simulateResiduals(FirstPart_IG)
plot(Sim_FirstPart_IG)
#Deviance residuals


Sim_FirstPart_Gamma <- simulateResiduals(FirstPart_Gamma)
plot(Sim_FirstPart_Gamma)
#Basically all sorst of error


Sim_FirstPart_mgcv <- simulateResiduals(FirstPart_Tweediemgcv)
plot(Sim_FirstPart_Gamma)
#All sorts of errors

```

The alternatives are

-   weibull model

-   brms

-   parametric bootstrap

```{r Weibull}

FirstPart$FemaleType <- as.factor(FirstPart$FemaleType)

# Load necessary libraries
library(survival)

# Fit the Weibull model using survreg
FirstPart_Weibull <- survreg(Surv(Delay) ~ FemaleType, data = FirstPart, dist = "weibull")

# Check the summary of the fitted model
summary(FirstPart_Weibull)


# Generate a sequence of delay times
delay_seq <- seq(from = min(FirstPart$Delay), to = max(FirstPart$Delay), length.out = 100)

# Create a new data frame with these delay times and the corresponding FemaleType
new_data <- expand.grid(FemaleType = levels(FirstPart$FemaleType), Delay = delay_seq)


# Get the predicted survival times for each observation in the new dataset
weibull_surv_individuals <- predict(FirstPart_Weibull, newdata = new_data, type = "response")


# Create an empty plot for survival curves
plot(NA, xlim = c(min(delay_seq), max(delay_seq)), 
     ylim = range(weibull_surv_individuals), 
     xlab = "Delay Time", ylab = "Predicted Survival Time", type = "n")

# Loop through each FemaleType and plot the predicted survival curve
for (i in 1:length(levels(FirstPart$FemaleType))) {
  
  # Filter the predictions and delay times for this FemaleType
  weibull_surv_female <- weibull_surv_individuals[(i - 1) * 100 + (1:100)]
  weibull_data <- delay_seq  # Corresponding delay times
  
  # Plot the predicted survival curve for this FemaleType
  lines(weibull_data, weibull_surv_female, col = i, lty = 2)  # Adjust color and line style
}

# Add a legend for the FemaleType categories
legend("topright", legend = levels(FirstPart$FemaleType), col = 1:length(levels(FirstPart$FemaleType)), lty = 2)




```

```{r}

FirstPart_Bayes <- brm(
  formula = Delay ~ FemaleType,             # Model with FemaleType as predictor
  family = Gamma(link = "log"),             # Using Gamma distribution with log link
  data = FirstPart,                         # Your dataset
  prior = c(
    # Informative priors (can adjust these based on your domain knowledge)
    prior(normal(0, 5), class = "b"),       # Prior for the regression coefficients
    prior(normal(0, 5), class = "Intercept") # Prior for the intercept
  ),
  chains = 4,                              # Number of MCMC chains
  cores = 4,                               # Number of CPU cores
  iter = 2000,                             # Number of iterations per chain
  control = list(adapt_delta = 0.99)        # Control parameters for better convergence
)

# Check model summary
summary(FirstPart_Bayes)


pp_check(FirstPart_Bayes)
# Obtain posterior predictive values
y_pred <- posterior_predict(FirstPart_Bayes)

# Plot residuals
plot(y_pred - FirstPart$Delay)


```

```{r bootstrapping}


library(dplyr)

# Set seed for reproducibility
set.seed(123)

# Number of bootstrap iterations
n_bootstrap <- 1000

# Prepare the data (assumed to be in a tibble or data.frame format)
# Example: Replace with your actual data
# data <- FirstPart

# Step 1: Create a function for calculating the difference in means between groups
bootstrap_diff_in_means <- function(data, group1, group2) {
  mean_group1 <- mean(data$Delay[data$FemaleType == group1], na.rm = TRUE)
  mean_group2 <- mean(data$Delay[data$FemaleType == group2], na.rm = TRUE)
  return(mean_group1 - mean_group2)
}

# Step 2: Set up the bootstrapping process
bootstrap_results <- replicate(n_bootstrap, {
  # Resample with replacement for each group
  resampled_data <- data %>%
    group_by(FemaleType) %>%
    sample_n(size = n(), replace = TRUE)
  
  # Calculate differences in means for each pair of groups
  diff_sister_daughter <- bootstrap_diff_in_means(resampled_data, "Sister", "Daughter")
  diff_sister_mother <- bootstrap_diff_in_means(resampled_data, "Sister", "Mother")
  diff_daughter_mother <- bootstrap_diff_in_means(resampled_data, "Daughter", "Mother")
  
  # Return the differences in means
  c(diff_sister_daughter, diff_sister_mother, diff_daughter_mother)
})

# Step 3: Calculate the observed differences in means from the original data
observed_diff_sister_daughter <- bootstrap_diff_in_means(data, "Sister", "Daughter")
observed_diff_sister_mother <- bootstrap_diff_in_means(data, "Sister", "Mother")
observed_diff_daughter_mother <- bootstrap_diff_in_means(data, "Daughter", "Mother")

# Step 4: Calculate 95% confidence intervals for each difference
conf_int_sister_daughter <- quantile(bootstrap_results[1, ], c(0.025, 0.975))
conf_int_sister_mother <- quantile(bootstrap_results[2, ], c(0.025, 0.975))
conf_int_daughter_mother <- quantile(bootstrap_results[3, ], c(0.025, 0.975))

# Step 5: Calculate p-values by comparing observed values to the bootstrap distribution
p_value_sister_daughter <- mean(abs(bootstrap_results[1, ]) >= abs(observed_diff_sister_daughter))
p_value_sister_mother <- mean(abs(bootstrap_results[2, ]) >= abs(observed_diff_sister_mother))
p_value_daughter_mother <- mean(abs(bootstrap_results[3, ]) >= abs(observed_diff_daughter_mother))

# Print results
cat("Observed Difference (Sister vs Daughter): ", observed_diff_sister_daughter, "\n")
cat("Bootstrap 95% CI (Sister vs Daughter): ", conf_int_sister_daughter, "\n")
cat("P-value (Sister vs Daughter): ", p_value_sister_daughter, "\n")

cat("Observed Difference (Sister vs Mother): ", observed_diff_sister_mother, "\n")
cat("Bootstrap 95% CI (Sister vs Mother): ", conf_int_sister_mother, "\n")
cat("P-value (Sister vs Mother): ", p_value_sister_mother, "\n")

cat("Observed Difference (Daughter vs Mother): ", observed_diff_daughter_mother, "\n")
cat("Bootstrap 95% CI (Daughter vs Mother): ", conf_int_daughter_mother, "\n")
cat("P-value (Daughter vs Mother): ", p_value_daughter_mother, "\n")

```

## Effect of treatment and breeding opportunity on occurrence of eviction

due to complete separation of data, we will have to use a Firth logistic regression

```{r Data}

#Occurrences of eviction 
EvictionOcc <- DC_Info_F %>% 
  distinct(ExperimentalGroup, .keep_all = TRUE) %>% 
  mutate(Eviction = case_when(!is.na(EvictionDate) ~ "Yes",
                              TRUE ~ "No")) %>% 
  mutate(Period = "Post") %>% 
  select(ExperimentalGroup,
         Treatment,
         Period,
         Eviction) %>% 
  bind_rows(., 
            DC_Info_F %>% 
  distinct(ExperimentalGroup,Treatment) %>% 
  mutate(Period = "Pre",
         Eviction = "No")) %>% 
  #RELEVEL
  mutate(Period = fct_relevel(Period,"Pre","Post"),
         Treatment = fct_relevel(Treatment, "Sub", "Queen"))

View(EvictionOcc)


```

```{r Model}

EvictionFirth <- logistf(as.factor(Eviction)~ Period * Treatment, data = EvictionOcc)
summary(EvictionFirth)


```

## Effect of treatment on eviction hazard

Determine the effect of treatment and male introduction on aggressive suppression of subordinate reproduction. Tusker (queen) had a very very late eviction. Lion (Sub) had no eviction til euthanized and DP (Sub) had no eviction til the death of the breeding female.

```{r Data}

#Isolation Info
SA_IsolationInfo <- DC_Info_F %>% 
  distinct(ExperimentalGroup,
           IsolationPeriod,.keep_all = TRUE) %>% 
  mutate(StartTime = 0,
         StopTime = as.numeric(IsolationPeriod),
         Event = 0,
         Male = 0) %>% 
  select(ExperimentalGroup,
         Treatment,
         StartTime,
         StopTime,
         Male,
         Event)


#Eviction Info
SA_PairingInfo <- DC_Info_F %>% 
  filter(!is.na(EvictionDate)) %>% 
  mutate(Event = 1,
         Male = 1) %>% 
  mutate(StartTime = as.numeric(IsolationPeriod)) %>% 
  mutate(StopTime  = as.numeric(IsolationPeriod + EvictionPairingDayDiff)) %>% 
    select(ExperimentalGroup,
           Treatment,
         StartTime,
         StopTime,
         Male,
         Event) %>% 
  distinct()


#Lion 
#Sub Treatment
SA_Lion <- DC_Info_F %>% 
  filter(ExperimentalGroup == "Lion") %>% 
  mutate(Event = 0,
         Male = 1,
         StartTime = as.numeric(IsolationPeriod),
         StopTime = as.numeric(LastDate-PairingDate)) %>% 
      select(ExperimentalGroup,
             Treatment,
         StartTime,
         StopTime,
         Male,
         Event) %>% 
  distinct()


#DP
#Sub treatment
SA_DP <- DC_Info_F %>% 
  filter(ExperimentalGroup == "DevilsPeak",
         AnimalID == "DVF048") %>% 
  mutate(Event = 0,
         Male = 1,
         StartTime = as.numeric(IsolationPeriod),
         StopTime = as.numeric(LastDate-PairingDate)) %>% 
  select(ExperimentalGroup,
         Treatment,
         StartTime,
         StopTime,
         Male,
         Event) %>% 
  distinct()
str(SA_PairingInfo)


#Merge all data together
SA_Data <- bind_rows(SA_IsolationInfo,
                     SA_PairingInfo,
                     SA_Lion,
                     SA_DP) %>% 
  mutate(StopTime = case_when(StartTime == StopTime ~ StopTime+0.5,
                              TRUE ~ StopTime)) %>% 
  mutate(Delay = StopTime - StartTime)



```

Overall there is no effect of treatment on the aggression hazard.

```{r Model All}

#Cox model after the addition of male
Cox_All <- coxph(Surv(Delay, Event) ~ Treatment, data = SA_Data %>% 
                     filter(Male == 1))
summary(Cox_All)

#Checking the proportional hazards assumption
Cox_All_PHcheck <- cox.zph(Cox_All)

# Summarizing the output of the proportional hazards check
summary(Cox_All_PHcheck)$table


```

If we exclude the cases where helper could not evict because they were evicted, the result is the same in that there is no effect of treatment on the aggression hazard

```{r Model helper evictor}

#Cox model after the addition of male
Cox_Helper <- coxph(Surv(Delay, Event) ~ Treatment, data = SA_Data %>% 
                     filter(Male == 1,
                            ExperimentalGroup!= "Angol",
                            ExperimentalGroup!= "Stella"))
summary(Cox_Helper)

#Checking the proportional hazards assumption
Cox_Helper_PHcheck <- cox.zph(Cox_Helper)


```

## Effect of treatment on the delay until aggression

```{r Data}

Delay_Data <- DC_Info_F %>% 
  select(ExperimentalGroup,
         Treatment,
         EvictionPairingDayDiff) %>% 
  filter(!is.na(EvictionPairingDayDiff)) %>% 
  distinct() %>%
  mutate(EvictionPairingDayDiff = as.numeric(EvictionPairingDayDiff)) %>% 
  mutate(EvictionPairingDayDiff = case_when(EvictionPairingDayDiff == 0 ~ 0.5,
         TRUE ~ EvictionPairingDayDiff))

```

```{r Model}

#Gamma model
Delay_Gamma <- glmmTMB(EvictionPairingDayDiff ~ Treatment, 
                             family = Gamma(link = "log"), 
                             data = Delay_Data %>% 
                         filter(ExperimentalGroup!= "Angol",
                                ExperimentalGroup!= "Stella"))
summary(Delay_Gamma)


#Gamma validation 
Sim_Gamma <- simulateResiduals(Delay_Gamma)
plot(Sim_Gamma)



#Log normal model 
Delay_Log <- glmmTMB(EvictionPairingDayDiff ~ Treatment, 
                       family = "lognormal", 
                       data = Delay_Data %>% 
                       filter(ExperimentalGroup!= "Angol",
                              ExperimentalGroup!= "Stella"))
summary(Delay_Log)

#log normal validation
Sim_Log <- simulateResiduals(Delay_Log)
plot(Sim_Log )
# Issue with homogeneity of variance 

#AIC of gamma model seems to be better 
AIC(Delay_Gamma,Delay_Log)


# 
# #Delay Poisson 
# Delay_poisson <- glmmTMB(EvictionPairingDayDiff ~ Treatment, 
#                        family = "poisson", 
#                        data = Delay_Data %>% 
#                        filter(ExperimentalGroup!= "Angol",
#                               ExperimentalGroup!= "Stella"))
# summary(Delay_poisson)
# 
# 
# 
# #Delay negative.binomial 
# #0.5 is an issue 
# Delay_nega <- glmmTMB(EvictionPairingDayDiff ~ Treatment, 
#                        family = "nbinom2", 
#                        data = Delay_Data %>% 
#                        filter(ExperimentalGroup!= "Angol",
#                               ExperimentalGroup!= "Stella"))
# 

AIC(Delay_Gamma,Delay_Log,Delay_poisson,Delay_nega)


```

```{r Prediction}


#Treatment to be used in predict function
pdata_delay <- data.frame(Treatment = c("Queen", "Sub"))

#Inverse link
ilink_delay <- family(Delay_Gamma)$linkinv

#Predicted value on the link scale 
Predicted_delay <- cbind(pdata_delay, as.data.frame(predict(Delay_Gamma, newdata = pdata_G, type = "link", se.fit = TRUE))) %>% 
  #ADD RESPONSE SCALE PREDICTED
  mutate(Fitted = ilink_delay(fit),
         Upper = ilink_delay(fit + (1.96 * se.fit)),
         Lower = ilink_delay(fit - (1.96 * se.fit)))
View(Predicted_delay)


```

```{r figure}


Plot_Delay <- ggplot() +
  geom_jitter(data = Delay_Data %>% 
                filter(ExperimentalGroup!= "Angol",
                       ExperimentalGroup!= "Stella"), 
              aes(Treatment, EvictionPairingDayDiff), alpha = 0.5, height = 0, width = 0.2, size = 3) + 
  
  #ADD CONFIDENCE INTERVALS
  geom_errorbar(data = Predicted_delay,
                aes(x = Treatment,ymin= Lower,ymax = Upper), width = 0.05, size = 0.9, colour = "black") + 
  
  #ADD FITTED TREATMENT
  geom_point(data = Predicted_delay,
                aes(x = Treatment, y = Fitted), colour = "black", size = 2.5) + 
  
  theme_classic()

```

## Effect of BS on outcome of aggression

```{r Data}

Q_pWin_Data <- DC_Info_F %>% 
  filter(BS_Original == "Breeder") %>% 
  filter(EvictionStatus != "InGroup") %>% 
  mutate(EvictionStatus = fct_relevel(EvictionStatus, "Evictee","Evictor")) 
View(Q_pWin_Data)


```

```{r Model}

#Model p(win)
pW_Breeder <- glmmTMB(EvictionStatus ~ 1,
                      family = "binomial",
  data = Q_pWin_Data)
summary(pW_Breeder)
inv.logit(-1.6094)


#Model p(lose)
#I am interested in knowing whether the standard error is teh same 
pL_Breeder <- glmmTMB(EvictionStatus ~ 1,
                      family = "binomial",
  data = Q_pWin_Data %>% 
    mutate(EvictionStatus = fct_relevel(EvictionStatus, "Evictor","Evictee")))
summary(pL_Breeder)
#the entire model output is just the opposite values abd Std error is the same


#Model validation
SimR_QPw <- simulateResiduals(pW_Breeder)
plot(SimR_QPw)


```

```{r Prediction}

#Inverse link
ilink_pW_Breeder <- family(pW_Breeder)$linkinv


# Extract the intercept estimate and standard error of pW
tidy_pW_Br <- tidy(pW_Breeder)
pW_Br_estimate <- tidy_pW_Br$estimate[1]
pW_Br_se <- tidy_pW_Br$std.error[1]


# Extract the intercept estimate and standard error of pW
tidy_pL_Br <- tidy(pL_Breeder)
pL_Br_estimate <- tidy_pL_Br$estimate[1]
pL_Br_se <- tidy_pL_Br$std.error[1]



## Add on the fitted values and SEs *on the log [link] scale*
pW_Br <- tibble(Fitted = ilink_pW_Breeder(pW_Br_estimate),
                Upper = ilink_pW_Breeder(pW_Br_estimate + (1.96 * pW_Br_se)),
                Lower = ilink_pW_Breeder(pW_Br_estimate - (1.96 * pW_Br_se))) %>% 
  mutate(Response = "Win")
View(pW_Br)


## Add on the fitted values and SEs *on the log [link] scale*
pL_Br <- tibble(Fitted = ilink_pW_Breeder(pL_Br_estimate),
                Upper = ilink_pW_Breeder(pL_Br_estimate + (1.96 * pL_Br_se)),
                Lower = ilink_pW_Breeder(pL_Br_estimate - (1.96 * pL_Br_se))) %>% 
  mutate(Response = "Lose")
View(pL_Br)

```

\

```{r Plot}

#Data to plot
p_Br_ToPlot <-  bind_rows(pW_Br, 
                          pL_Br) %>% 
  mutate(Respone = fct_relevel(Response, "Win", "Lose"))


#Plot
#Would I need to add the raw data? 
# can adjust to decerase space between Response and make the graph more narrow
pWL_Breeder_Plot <- ggplot() +
  
  #ADD CONFIDENCE INTERVALS
  geom_errorbar(data = p_Br_ToPlot,
                aes(x = Response,
                    ymin= Lower,
                    ymax = Upper), linewidth = 1, width = 0.1, colour = "black") +
  #ADD FITTED TREATMENT
  geom_point(data = p_Br_ToPlot,
             aes(x = Response, y = Fitted), colour = "black", size = 3) +
  
  theme_classic() +
  
  # ADD HORIZONTAL DOTTED LINE AT 0.5
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "red", size = 0.8)



#Plot with only the probability to lose 
pW_Breeder_Plot <- ggplot() +
  
  #ADD CONFIDENCE INTERVALS
  geom_errorbar(data = p_Br_ToPlot%>% 
               filter(Response == "Win"),
                aes(x = Response,
                    ymin= Lower,
                    ymax = Upper), linewidth = 1, width = 0.1, colour = "black") +
  #ADD FITTED TREATMENT
  geom_point(data = p_Br_ToPlot %>% 
               filter(Response == "Win"),
             aes(x = Response, y = Fitted), colour = "black", size = 3) +
  
  theme_classic() +
  
  # ADD HORIZONTAL DOTTED LINE AT 0.5
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "red", size = 0.8) +
  
    # SET Y-AXIS LIMITS
  ylim(0, 1) +
  
   # ADJUST ASPECT RATIO FOR A NARROWER PLOT
  theme(aspect.ratio = 1.5)

```

Restricting analyses to the queen treatment shows that queen are significantly more likely to lose reproductive competition than their daughter.

```{r data}

Q_pWin_Data <- WeightDiff %>% 
  filter(BS_Original == "Breeder") %>% 
  filter(EvictionStatus != "InGroup") %>% 
  mutate(EvictionStatus = fct_relevel(EvictionStatus, "Evictee","Evictor")) 
  

levels(Q_pWin_Data$EvictionStatus)

```

```{r Model}

#Model p(win)
pW_Breeder <- glmmTMB(EvictionStatus ~ 1,
                      family = "binomial",
  data = Q_pWin_Data %>% 
    filter(DateType == "Eviction"))
summary(pW_Breeder)


#Model p(lose)
#I am interested in knowing whether the standard error is teh same 
pL_Breeder <- glmmTMB(EvictionStatus ~ 1,
                      family = "binomial",
  data = Q_pWin_Data %>% 
    filter(DateType == "Eviction") %>% 
    mutate(EvictionStatus = fct_relevel(EvictionStatus, "Evictor","Evictee")))
summary(pL_Breeder)
#the entire model output is just the opposite values abd Std error is the same


```

```{r Model validation}

SimR_Pw <- simulateResiduals(pW_Breeder)

plot(SimR_Pw)

```

```{r Prediction}

#Inverse link
ilink_pW_Breeder <- family(pW_Breeder)$linkinv


# Extract the intercept estimate and standard error of pW
tidy_pW_Br <- tidy(pW_Breeder)
pW_Br_estimate <- tidy_pW_Br$estimate[1]
pW_Br_se <- tidy_pW_Br$std.error[1]


# Extract the intercept estimate and standard error of pW
tidy_pL_Br <- tidy(pL_Breeder)
pL_Br_estimate <- tidy_pL_Br$estimate[1]
pL_Br_se <- tidy_pL_Br$std.error[1]



## Add on the fitted values and SEs *on the log [link] scale*
pW_Br <- tibble(Fitted = ilink_pW_Breeder(pW_Br_estimate),
                Upper = ilink_pW_Breeder(pW_Br_estimate + (1.96 * pW_Br_se)),
                Lower = ilink_pW_Breeder(pW_Br_estimate - (1.96 * pW_Br_se))) %>% 
  mutate(Response = "Win")
View(pW)


## Add on the fitted values and SEs *on the log [link] scale*
pL_Br <- tibble(Fitted = ilink_pW_Breeder(pL_Br_estimate),
                Upper = ilink_pW_Breeder(pL_Br_estimate + (1.96 * pL_Br_se)),
                Lower = ilink_pW_Breeder(pL_Br_estimate - (1.96 * pL_Br_se))) %>% 
  mutate(Response = "Lose")
View(pL)

```

```{r Plot}

#Data to plot
p_Br_ToPlot <-  bind_rows(pW_Br, 
                          pL_Br) %>% 
  mutate(Respone = fct_relevel(Response, "Win", "Lose"))


#Plot
#Would I need to add the raw data? 
# can adjust to decerase space between Response and make the graph more narrow
pWL_Breeder_Plot <- ggplot() +
  
  #ADD CONFIDENCE INTERVALS
  geom_errorbar(data = p_Br_ToPlot,
                aes(x = Response,
                    ymin= Lower,
                    ymax = Upper), linewidth = 1, width = 0.1, colour = "black") +
  #ADD FITTED TREATMENT
  geom_point(data = p_Br_ToPlot,
             aes(x = Response, y = Fitted), colour = "black", size = 3) +
  
  theme_classic() +
  
  # ADD HORIZONTAL DOTTED LINE AT 0.5
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "red", size = 0.8)

```

## 

## Effect of BS on tolerance of breeders towards other female

Bitburger first queen litter must be excluded because she got pregnant after she was put in isolation .One question is what to do with Wicklow as 1 female evicted but never gave birth after?

The model belwo is presented without WW and shows that NBF that produced a litter have a significantly lower tolerance for other females, whether mother or sister, compared to queen

```{r Data}

#Parturition Count 
PartCount <- DC_Info_F %>%
  group_by(ExperimentalGroup) %>%
  mutate(BredFirst = rank(FirstDCParturitionDate, na.last = "keep", ties.method = "first")) %>%
  mutate(BredFirst = case_when(BredFirst == 1 ~ "Yes", 
                               TRUE ~ "No")) %>% 
  ungroup() %>% 
  dplyr::select(ExperimentalGroup,
                Treatment,
         AnimalID,
         BS_Original,
         FirstDCParturitionDate,
         EvictionDate,
         EvictionStatus,
         BredFirst)


#In the sub treatment all dominants evicted before producing their first litter 
Tolerance_HT <- PartCount %>% 
  filter(Treatment == "Sub") %>% 
  #REMOVE FROM DP AS SHE COULD NOT EVICT 
  filter(AnimalID != "DVF061") %>% 
  #ONLY RETAIN BREEDER 
  filter(!is.na(FirstDCParturitionDate)) %>% 
  #ADD TOOLERANCE 
  #STRICTLY SPEAKING SHOULD BE QUERIED BASED ON PART DATE
  mutate(Tolerance = case_when(EvictionStatus == "Evictor" ~ "No",
                               EvictionStatus == "InGroup" ~ "Yes"))


#Queen in the queen treatment 
#exclude the 3 queen that never bred and were evicted quickly
Tolerance_QT_Queen <- PartCount %>% 
  filter(Treatment == "Queen",
         BS_Original == "Breeder") %>% 
  #ONLY RETAIN BREEDER 
  filter(!is.na(FirstDCParturitionDate)) %>% 
  #REMOVE DRF004 FROM BITBURGER AS SHE CONCEIVED AFTER EVICTION
  filter(AnimalID != "DRF004") %>% 
  #ADD TOLERANCE 
    mutate(Tolerance = case_when(BredFirst == "Yes" & EvictionStatus == "Evictor" ~ "No",
                                 BredFirst == "Yes" & EvictionStatus == "Evictee" ~ "Yes")) 


#Tolerance of helper in the queen treatment 
Tolerance_QT_Helper <- PartCount %>% 
  filter(Treatment == "Queen",
         BS_Original == "Helper") %>% 
  #ONLY RETAIN BREEDER 
  filter(!is.na(FirstDCParturitionDate)) %>% 
  #ADD TOLERANCE 
    mutate(Tolerance = case_when(FirstDCParturitionDate > EvictionDate & EvictionStatus == "Evictor" ~ "No",
                                 TRUE ~ "Yes")) 


#Put all data together
#Less 3 queen evicted straight away
#less 2 helpers evicted straight away in QT
#less 11 females for sisters evicted straight away
#Less 1 female in DP that bred after the death of the other one


Tolerance_All <- bind_rows(Tolerance_HT,
                           Tolerance_QT_Queen,
                           Tolerance_QT_Helper) %>% 
  mutate(FemaleCat = case_when(BS_Original == "Breeder"~ "Breeder",
                               BS_Original == "Helper" & Treatment == "Queen"~ "HQT",
                               BS_Original == "Helper" & Treatment == "Sub"~ "HHT"))
  


```

```{r Model}

pTolerance <- glmmTMB(as.factor(Tolerance) ~ FemaleCat,
                      family = "binomial",
  data = Tolerance_All)
summary(pTolerance)

```

```{r Model Validation}

SimR_pTolerance <- simulateResiduals(pTolerance)

plot(SimR_pTolerance)

```

```{r Prediction}

```

```{r Visualisation}

```

## Effect of Treatment on probability of two breeders

```{r Data}

names(DC_Info_F)

CountBreeders <- DC_Info_F %>% 
  group_by(ExperimentalGroup,Treatment) %>% 
  summarize(CountBreeder = sum(!is.na(FirstDCParturitionDate))) %>% 
  ungroup() %>% 
  mutate(CountBreeder = case_when(CountBreeder == 1 ~ "One",
                                  CountBreeder == 2 ~ "Two"))

```

```{r Model}

pTwoBreeder <- glmmTMB(as.factor(CountBreeder) ~ Treatment,
                      family = "binomial",
  data = CountBreeders)
summary(pTwoBreeder)
inv.logit(-1.7047)#15.38% in the sub treatment
inv.logit(-1.7047 + 2.0412)

```

```{r Model validation}

SimR_pTwoBreeder <- simulateResiduals(
pTwoBreeder)

plot(SimR_pTwoBreeder)

```

## Effect of Queen on probability of NBF breeding

```{r Data}

names(DC_Info_F)

QueenS <- DC_Info_F %>% 
  group_by(Treatment,
           ExperimentalGroup) %>% 
  summarize(SubBreed_Count = sum(!is.na(FirstDCParturitionDate) & BS_Original == "Helper")) %>% 
  ungroup() %>% 
  mutate(SubBreed = case_when(SubBreed_Count>0 ~ "Yes",
                              TRUE ~ "No"))

View(QueenS)

```

```{r Model}

pSubBreed <- glmmTMB(as.factor(SubBreed) ~ Treatment,
                      family = "binomial",
  data = QueenS)
summary(pSubBreed)
inv.logit(23.88)#100
inv.logit(23.88-22.79)

```

```{r Model validation}

```

```{r }

```
